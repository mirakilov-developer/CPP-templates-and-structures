// MDSPro

#include <bits/stdc++.h>

#define pb push_back
#define se second
#define fi first
#define all(x) (x).begin(),(x).end()
using namespace std;

// usage: 
// SparseTable<Type> sp(array,[](const Type&a, const Type&b){
//    Type merged = mergeFunc(a,b); 
//    return merged;   
// });
// extra example in solve(){}

template<typename T>
struct SparseTable {
    vector<vector<T>> sparse;
    function<T(const T&, const T&)> merge;
 
    SparseTable(const vector<T>& arr, const function<T(const T&, const T&)>& func) : merge(func) {
        int n = arr.size();
        int logn = 32 - __builtin_clz(n);
        sparse.resize(logn, vector<T>(n));
        sparse[0] = arr;
        for (int lg = 1; lg < logn; lg++) {
            for (int i = 0; i + (1 << lg) <= n; i++) {
                sparse[lg][i] = merge(sparse[lg - 1][i], sparse[lg - 1][i + (1 << (lg - 1))]);
            }
        }   
    }
 
    T get(int l, int r) { // [l, r)
        int cur_log = 31 - __builtin_clz(r - l);
        return merge(sparse[cur_log][l], sparse[cur_log][r - (1 << cur_log)]);
    }
};

// https://acmp.ru/asp/do/index.asp?main=task&id_course=2&id_section=20&id_topic=293&id_problem=593
void solve(int NT){
    int n; cin >> n;
    vector<int> a(n); for(int i = 0; i < n; ++i) cin >> a[i];
    
    SparseTable<int> sp(a,[](const int&a, const int&b){
        return min(a,b);
    });
    
    int q; cin >> q;
    while(q--){
        int l,r; cin >> l >> r; l--;
        cout << sp.get(l,r) << " ";
    }
}


// #define TESTCASES
int main() {
    cin.tie(0)->sync_with_stdio(0);

    int t = 1;
    #ifdef TESTCASES
        cin >> t;
    #endif
    
    for(int i = 1; i <= t; ++i){
        solve(i);
        cout << "\n";
    }
}
