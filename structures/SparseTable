// MDSPro

#include <bits/stdc++.h>

#define trav(i,n) for(int i = 0; i < (n); i++)
#define pb push_back
#define se second
#define fi first
#define all(x) (x).begin(),(x).end()

using namespace std;
using ll = long long;

const ll MOD = 1e9+7;
const int INF = 1e9;
const ll INFLL = 4e18;
const double EPS = 1e-9;
const int SIZE = 1000*1007;

// usage:
//  sparse_table<type,func_struct> sp; sp.build(a);
//  https://acmp.ru/asp/do/index.asp?main=topic&id_course=2&id_section=20&id_topic=293
template<typename T, typename F> struct sparse_table{
    vector<vector<T>> table;
    vector<int> LOG_2;
    int n;
    
    F f;
    sparse_table(){ f = F(); };

    bool is_pow( int n ){
        return ( n & ( n - 1 ) ) == 0;
    }

    void build(vector<T> a){
        n = a.size();
        LOG_2.assign(n+1,0);
        for( int i = 2; i <= n; i++ ) LOG_2[i] = LOG_2[i - 1] + is_pow( i );
        
        table.assign(LOG_2[n]+1,vector<T>(n));
        for( int i = 0; i < n; i++ ) table[0][i] = a[i];
        
        for( int i = 0; i < LOG_2[n]; i++ )
            for( int j = 0; j < n-(1<<i); j++ )
                table[i+1][j] = f( table[i][j], table[i][j + (1<<i)] );
    }

    T get( int l, int r ){ // [l,r)
        assert(l < r);
        int pw = LOG_2[r - l];
        return f( table[pw][l], table[pw][r - ( 1 << pw )]);
    }

};

struct table_min {
    int operator()( const int &a, const int &b ){
        return a < b ? a : b;
    }    
};
struct table_max {
    int operator()( const int &a, const int &b ){
        return a > b ? a : b;
    }    
};
struct table_gcd {
    int operator()( const int &a, const int &b ){
        return __gcd( a, b );
    }    
};

using pii = pair<int,int>;
struct table_max_first_index {
    pii operator()( const pii &a, const pii &b ){
        if(a.fi > b.fi) return a;
        if(a.fi < b.fi) return b;
        
        return make_pair(max(a.fi,b.fi),min(b.se,a.se));
    }    
};

void solve(int NT){
    int n; cin >> n;
    vector<int> a(n); trav(i,n) cin >> a[i];
    
    sparse_table<int,table_min> sp;
    sp.build(a);
    
    int q; cin >> q;
    while(q--){
        int l,r; cin >> l >> r; l--;
        cout << sp.get(l,r) << " ";
    }
}


// #define TESTCASES
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int t = 1;
    #ifdef TESTCASES
        cin >> t;
    #endif
    
    for(int i = 1; i <= t; ++i){
        solve(i);
        cout << "\n";
    }
}
