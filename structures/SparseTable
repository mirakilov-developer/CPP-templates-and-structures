// Pathetic
 
#include <bits/stdc++.h>
 
#define trav(i,n) for(int i = 0; i < (n); ++i)
#define pb push_back
#define se second
#define fi first
#define all(x) (x).begin(),(x).end()
 
using namespace std;
using ll = long long;
using ld = long double;
using pii = pair<int,int>;
using vi = vector<int>;
 
const ld PI = 3.141592653589793;
const ll MOD = 1e9+7;
const int INF = 2009000999;
const ll INFLL = 4e18;
const double EPS = 1e-9;
const int SIZE = 1000*1007;

// Sparse table
// version 1.0.0
struct SparseTable{
    int f(int&a, int&b){ // idempotent function
        return min(a,b);
    }
    
    vector<vector<int>> sp;
    int n,mp;
    SparseTable(vector<int> v){
        n = v.size(),mp = ceil(log2(n+1));
        sp.assign(mp,vector<int>(n,0));
        sp[0] = v;
        for(int k = 0; k < mp-1; ++k){
            for(int i = 0; i < n-(1<<k); ++i){
                sp[k+1][i] = f(sp[k][i],sp[k][i+(1<<k)]);
            }
        }
    }
    
    int ask(int l, int r){ // [l,r)
        int p = 31-__builtin_clz(r-l);
        return f(sp[p][l],sp[p][r-(1<<p)]);
    }
};

void solve(int NT){
    int n; cin >> n;
    vector<int> a(n); trav(i,n) cin >> a[i];
    
    int k; cin >> k;
    SparseTable sp(a);
    while(k--){
        int l,r; cin >> l >> r; l--;
        cout << sp.ask(l,r) << " ";
    }
}

void setIn(string s) {freopen(s.c_str(), "r", stdin);}
void setOut(string s) {freopen(s.c_str(), "w", stdout);}

// #define TESTCASES
int main() {
    cin.tie(0)->sync_with_stdio(0);
    
    int t = 1;
    #ifdef TESTCASES
        cin >> t;
    #endif
    
    for(int i = 1; i <= t; ++i){
        solve(i);
        cout << "\n";
    }
}
